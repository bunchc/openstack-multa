---

- name: Update apt sources
  apt:
    update_cache: yes
    cache_valid_time: 3600
  register: apt_update
  until: apt_update|success
  retries: 5
  delay: 2
  when: ansible_os_family == "Debian"
  tags: 
    - packages
    - ubuntu

- name: Install  Packages
  apt: name={{ item }} state=present
  with_items:
    - vlan
    - bridge-utils
    - ifupdown-extra
    - git
  when: ansible_os_family == "Debian"
  tags:
    - packages
    - ubuntu

- name: Install Pip
  apt: name={{ item }} state=present
  with_items:
    - python-pip
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("controller1"))
  tags:
    - pip
    - ubuntu

- name: Upgrade Pip
  shell: pip install --upgrade pip
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("controller1"))
  tags:
    - pip
    - ubuntu 

- name: Install PyYAML
  pip:
    name: pyyaml
    executable: /usr/local/bin/pip
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("controller1"))
  tags:
    - packages
    - pip

- name: Upgrade CentOS
  yum:
    name: '*'
    state: latest
  when: ansible_os_family == "RedHat"
  tags:
    - upgrade
    - upgrade_centos
    - centos

- name: Upgrade Ubuntu
  apt: upgrade=dist
  when: ansible_os_family == "Debian"
  tags:
    - upgrade
    - upgrade_ubuntu
    - ubuntu

- name: Extract the last octet of mgmt network
  set_fact: octet={{ansible_eth3.ipv4.address.split('.')[3]}}
  when: ansible_br_mgmt is not defined
  tags:
    - networking
    - ubuntu

- name: Extract the Rackspace Gateway for ServiceNet Network
  shell: "netstat -r | grep 10.208 | awk '{print $2}'"
  register: service_net_gw
  when: ansible_br_mgmt is not defined
  tags:
    - networking
    - ubuntu

- name: Debug ServiceNet GW
  debug: 
    var: service_net_gw.stdout
    verbosity: 2
  when: ansible_br_mgmt is not defined
  tags:
    - networking
    - ubuntu

- name: Extract the DNS Servers
  shell: cat /etc/network/interfaces | grep -m 1 dns-nameservers | awk '{print $2 " " $3}'
  register: dns_servers
  when: ansible_br_mgmt is not defined
  tags:
    - networking
    - ubuntu

- name: Debug DNS Servers
  debug: 
    var: dns_servers.stdout
    verbosity: 2
  when: ansible_br_mgmt is not defined
  tags:
    - networking
    - ubuntu

- name: Configure GW Bridges
  template:
    src: files/interfaces-gw
    dest: /etc/network/interfaces
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("gw")) and (ansible_br_mgmt is not defined)
  register: bridges_gw
  tags:
    - networking
    - ubuntu

- name: Debug Networking GW
  debug: 
    var: bridges_gw.changed
    verbosity: 2
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("gw"))
  tags:
    - networking
    - ubuntu

## generates the reboot-required.pkgs
## used just for testing reboot code which follows
## comment out once working
# - name: Generate reboot file
#   copy:
#     src: files/reboot-required.pkgs
#     dest: /var/run/reboot-required.pkgs
#   tags:
#     - test

- name: Is Reboot Required
  stat: 
    path: /var/run/reboot-required.pkgs
  register: stat_result
  tags:
    - upgrade
    - networking

- name: GW Reboot Required?
  debug:
    msg: "GW Reboot required"
  when: (inventory_hostname | search("gw")) and (stat_result.stat.exists == True) or (inventory_hostname | search("gw")) and (bridges_gw.changed == true)
  tags:
    - upgrade
    - networking

- name: Restart GW
  shell: sleep 2 && shutdown -r now "Ansible triggered restart"
  async: 1
  poll: 0
  become: true
  ignore_errors: true
  when: (inventory_hostname | search("gw")) and (stat_result.stat.exists == True) or (inventory_hostname | search("gw")) and (bridges_gw.changed == true)
  tags:
    - upgrade
    - networking

- name: Wait for GW Node to reboot
  local_action: shell ansible -m ping {{ inventory_hostname }}
  register: result
  until: result.rc == 0
  retries: 30
  delay: 10
  become: false
  when: (inventory_hostname | search("gw")) and (stat_result.stat.exists == True) or (inventory_hostname | search("gw")) and (bridges_gw.changed == true)
  tags:
    - upgrade
    - networking

- name: Sending a status update e-mail
  mail:
    host: '{{ host }}'
    port: '{{ port }}'
    secure:  '{{ secure }}'
    username: '{{ username }}'
    password: '{{ password }}'
    from: '{{ from }}'
    to: '{{ to }}'
    subject: GW VM Prepared
    body: GW VM has been successfully prepared
  run_once: true
  when: send_mail | bool
  tags:
    - mail

- name: Gather facts for gw
  become: no
  delegate_to: localhost
  shell: ansible gw -m setup
  tags:
    - networking
    - ubuntu
    - vpn
    
- name: Add routes file to controllers
  template:
    src: files/routes
    dest: /etc/network/routes
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("controller"))
  tags:
    - networking
    - ubuntu
    - vpn

- name: Configure Controller Bridges
  template:
    src: files/interfaces-controller
    dest: /etc/network/interfaces
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("controller")) and (ansible_br_mgmt is not defined)
  register: bridges_controller
  tags:
    - networking
    - ubuntu

- name: Add routes file to compute nodes
  template:
    src: files/routes
    dest: /etc/network/routes
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("compute"))
  tags:
    - networking
    - ubuntu
    - vpn

- name: Configure Compute Bridges
  template:
    src: files/interfaces-compute
    dest: /etc/network/interfaces
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("compute")) and (ansible_br_mgmt is not defined)
  register: bridges_compute
  tags:
    - networking
    - ubuntu

- name: Configure Cinder Bridges
  template:
    src: files/interfaces-cinder
    dest: /etc/network/interfaces
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("cinder")) and (ansible_br_mgmt is not defined)
  register: bridges_cinder
  tags:
    - networking
    - ubuntu

- name: Configure Swift Bridges
  template:
    src: files/interfaces-swift
    dest: /etc/network/interfaces
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("swift")) and (ansible_br_mgmt is not defined)
  register: bridges_swift
  tags:
    - networking
    - ubuntu

- name: Configure LB Bridges
  template:
    src: files/interfaces-lb
    dest: /etc/network/interfaces
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("lb")) and (ansible_br_mgmt is not defined)
  register: bridges_lb
  tags:
    - networking
    - ubuntu

- name: Add routes file to console
  template:
    src: files/routes
    dest: /etc/network/routes
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("console"))
  tags:
    - networking
    - ubuntu
    - vpn

- name: Configure Console Bridges
  template:
    src: files/interfaces-console
    dest: /etc/network/interfaces
    backup: yes
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("console")) and (ansible_br_mgmt is not defined)
  register: bridges_console
  tags:
    - networking
    - ubuntu

- name: Debug Networking Controller
  debug: 
    var: bridges_controller.changed
    verbosity: 2
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("controller"))
  tags:
    - networking
    - ubuntu

- name: Debug Networking Compute
  debug: 
    var: bridges_compute.changed
    verbosity: 2
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("compute"))
  tags:
    - networking
    - ubuntu

- name: Debug Networking Cinder
  debug: 
    var: bridges_cinder.changed
    verbosity: 2
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("cinder"))
  tags:
    - networking
    - ubuntu

- name: Debug Networking Swift
  debug: 
    var: bridges_swift.changed
    verbosity: 2
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("swift"))
  tags:
    - networking
    - ubuntu

- name: Debug Networking Console
  debug: 
    var: bridges_console.changed
    verbosity: 2
  when: (ansible_os_family == "Debian") and (inventory_hostname | search("console"))
  tags:
    - networking
    - ubuntu

## generates the reboot-required.pkgs
## used just for testing reboot code which follows
## comment out once working
# - name: Generate reboot file
#   copy:
#     src: files/reboot-required.pkgs
#     dest: /var/run/reboot-required.pkgs
#   tags:
#     - test

- name: Sending a status update e-mail
  mail:
    host: '{{ host }}'
    port: '{{ port }}'
    secure:  '{{ secure }}'
    username: '{{ username }}'
    password: '{{ password }}'
    from: '{{ from }}'
    to: '{{ to }}'
    subject: Starting Reboots
    body: Starting reboots of all nodes
  run_once: true
  when: send_mail | bool
  tags:
    - mail

- name: Is Reboot Required
  stat: 
    path: /var/run/reboot-required.pkgs
  register: stat_result
  tags:
    - upgrade
    - networking

- name: Test stat results
  debug:
    var: stat_result
    verbosity: 2
  tags:
    - upgrade
    - networking

- name: Controller Reboot Required?
  debug:
    msg: "Controller Reboot required"
  when: ((inventory_hostname | search("controller")) and (stat_result.stat.exists == True)) or ((inventory_hostname | search("controller")) and (bridges_controller.changed == true))
  tags:
    - upgrade
    - networking

- name: Compute Reboot Required?
  debug:
    msg: "Compute Reboot required"
  when: (inventory_hostname | search("compute")) and (stat_result.stat.exists == True) or (inventory_hostname | search("compute")) and (bridges_compute.changed == true)
  tags:
    - upgrade
    - networking

- name: Cinder Reboot Required?
  debug:
    msg: "Cinder Reboot required"
  when: (inventory_hostname | search("cinder")) and (stat_result.stat.exists == True) or (inventory_hostname | search("cinder")) and (bridges_cinder.changed == true)
  tags:
    - upgrade
    - networking

- name: LB Reboot Required?
  debug:
    msg: "LB Reboot required"
  when: (inventory_hostname | search("lb")) and (stat_result.stat.exists == True) or (inventory_hostname | search("lb")) and (bridges_lb.changed == true)
  tags:
    - upgrade
    - networking

- name: Swift Reboot Required?
  debug:
    msg: "Swift Reboot required"
  when: (inventory_hostname | search("swift")) and (stat_result.stat.exists == True) or (inventory_hostname | search("swift")) and (bridges_swift.changed == true)
  tags:
    - upgrade
    - networking

- name: Console Reboot Required?
  debug:
    msg: "Console Reboot required"
  when: (inventory_hostname | search("console")) and (stat_result.stat.exists == True) or (inventory_hostname | search("console")) and (bridges_console.changed == true)
  tags:
    - upgrade
    - networking

# - name: Ceph Reboot Required?
#   debug:
#     msg: "Ceph Reboot required"
#   when: (inventory_hostname | search("ceph")) and (stat_result.stat.exists == True) or (inventory_hostname | search("ceph")) and (bridges_ceph.changed == true)
#   tags:
#     - upgrade
#     - common

- name: Restart Controller
  shell: sleep 2 && shutdown -r now "Ansible triggered restart"
  async: 1
  poll: 0
  become: true
  ignore_errors: true
  when: (inventory_hostname | search("controller")) and (stat_result.stat.exists == True) or (inventory_hostname | search("controller")) and (bridges_controller.changed == true)
  tags:
    - upgrade
    - networking

- name: Restart Compute
  shell: sleep 2 && shutdown -r now "Ansible triggered restart"
  async: 1
  poll: 0
  become: true
  ignore_errors: true
  when: (inventory_hostname | search("compute")) and (stat_result.stat.exists == True) or (inventory_hostname | search("compute")) and (bridges_compute.changed == true)
  tags:
    - upgrade
    - networking

- name: Restart Cinder
  shell: sleep 2 && shutdown -r now "Ansible triggered restart"
  async: 1
  poll: 0
  become: true
  ignore_errors: true
  when: (inventory_hostname | search("cinder")) and (stat_result.stat.exists == True) or (inventory_hostname | search("cinder")) and (bridges_cinder.changed == true)
  tags:
    - upgrade
    - networking

- name: Restart LB
  shell: sleep 2 && shutdown -r now "Ansible triggered restart"
  async: 1
  poll: 0
  become: true
  ignore_errors: true
  when: (inventory_hostname | search("lb")) and (stat_result.stat.exists == True) or (inventory_hostname | search("lb")) and (bridges_lb.changed == true)
  tags:
    - upgrade

- name: Restart Swift
  shell: sleep 2 && shutdown -r now "Ansible triggered restart"
  async: 1
  poll: 0
  become: true
  ignore_errors: true
  when: (inventory_hostname | search("swift")) and (stat_result.stat.exists == True) or (inventory_hostname | search("swift")) and (bridges_swift.changed == true)
  tags:
    - upgrade
    - networking

- name: Restart Console
  shell: sleep 2 && shutdown -r now "Ansible triggered restart"
  async: 1
  poll: 0
  become: true
  ignore_errors: true
  when: (inventory_hostname | search("console")) and (stat_result.stat.exists == True) or (inventory_hostname | search("console")) and (bridges_console.changed == true)
  tags:
    - upgrade
    - networking

# - name: Restart Ceph
#   shell: sleep 2 && shutdown -r now "Ansible triggered restart"
#   async: 1
#   poll: 0
#   become: true
#   ignore_errors: true
#   when: (inventory_hostname | search("ceph")) and (stat_result.stat.exists == True) or (inventory_hostname | search("ceph")) and (bridges_ceph.changed == true)
#   tags:
#     - upgrade
#     - networking

- name: Wait for Controller Nodes to reboot
  local_action: shell ansible -m ping {{ inventory_hostname }}
  register: result
  until: result.rc == 0
  retries: 30
  delay: 10
  become: false
  when: (inventory_hostname | search("controller")) and (stat_result.stat.exists == True) or (inventory_hostname | search("controller")) and (bridges_controller.changed == true)
  tags:
    - upgrade
    - networking

- name: Wait for Compute Nodes to reboot
  local_action: shell ansible -m ping {{ inventory_hostname }}
  register: result
  until: result.rc == 0
  retries: 30
  delay: 10
  become: false
  when: (inventory_hostname | search("compute")) and (stat_result.stat.exists == True) or (inventory_hostname | search("compute")) and (bridges_compute.changed == true)
  tags:
    - upgrade
    - networking

- name: Wait for Cinder Nodes to reboot
  local_action: shell ansible -m ping {{ inventory_hostname }}
  register: result
  until: result.rc == 0
  retries: 30
  delay: 10
  become: false
  when: (inventory_hostname | search("cinder")) and (stat_result.stat.exists == True) or (inventory_hostname | search("cinder")) and (bridges_cinder.changed == true)
  tags:
    - upgrade
    - networking

- name: Wait for LB Nodes to reboot
  local_action: shell ansible -m ping {{ inventory_hostname }}
  register: result
  until: result.rc == 0
  retries: 30
  delay: 10
  become: false
  when: (inventory_hostname | search("lb")) and (stat_result.stat.exists == True) or (inventory_hostname | search("lb")) and (bridges_lb.changed == true)
  tags:
    - upgrade
    - networking

- name: Wait for Swift Nodes to reboot
  local_action: shell ansible -m ping {{ inventory_hostname }}
  register: result
  until: result.rc == 0
  retries: 30
  delay: 10
  become: false
  when: (inventory_hostname | search("swift")) and (stat_result.stat.exists == True) or (inventory_hostname | search("swift")) and (bridges_swift.changed == true)
  tags:
    - upgrade
    - networking

- name: Wait for Console Node to reboot
  local_action: shell ansible -m ping {{ inventory_hostname }}
  register: result
  until: result.rc == 0
  retries: 30
  delay: 10
  become: false
  when: (inventory_hostname | search("console")) and (stat_result.stat.exists == True) or (inventory_hostname | search("console")) and (bridges_console.changed == true)
  tags:
    - upgrade
    - networking


- name: Sending a status update e-mail
  mail:
    host: '{{ host }}'
    port: '{{ port }}'
    secure:  '{{ secure }}'
    username: '{{ username }}'
    password: '{{ password }}'
    from: '{{ from }}'
    to: '{{ to }}'
    subject: Reboots Completed
    body: All nodes have been rebooted
  run_once: true
  when: send_mail | bool
  tags:
    - mail

# - name: Wait for Ceph Nodes to reboot
#   local_action: shell ansible -m ping {{ inventory_hostname }}
#   register: result
#   until: result.rc == 0
#   retries: 30
#   delay: 10
#   become: false
#   when: (inventory_hostname | search("ceph")) and (stat_result.stat.exists == True) or (inventory_hostname | search("ceph")) and (bridges_ceph.changed == true)
#   tags:
#     - upgrade
#     - networking

- name: Install openstack-selinux
  package:
    name: openstack-selinux
    state: present
  when: ansible_os_family == "RedHat"
  tags:
    - redhat